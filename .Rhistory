knitr::opts_chunk$set(echo = TRUE)
#Extract and show the columns a new data frame named titanicSubset.
titanicSubset <- c("name", "fare", "sibsp", "parch")
# To show the head of the data frame
head(titanicSubset)
library(dplyr)
Titanic <- read.csv("C:\\Users\\emine\\OneDrive\\Masaüstü\\ASSIGNMENT 2\\titanic.csv")
children_survived <- Titanic %>%
filter(age < 18, survived == 1) %>%
count()
print(children_survived)
library(dplyr)
passengers_by_sex <- Titanic %>%
group_by(sex) %>%
count()
print(passengers_by_sex)
library(dplyr)
# Calculate the median age
median_age <- median(Titanic$age, na.rm = TRUE)
# Fill missing age values with the median age
Titanic$age[is.na(Titanic$age)] <- median_age
# Show the head of the data frame
head(Titanic)
# Loading the dplyr package
library(dplyr)
# Calculate the survival count of each passenger class
survival_count <- aggregate(Titanic$survived ~ Titanic$pclass, FUN = sum)
# Calculate the total count of each passenger class
total_count <- aggregate(Titanic$survived ~ Titanic$pclass, FUN = length)
# Calculate the survival rate of passengers in each class
survival_rate <- survival_count$'Titanic$survived' / total_count$'Titanic$survived'
# Print the survival rate
print(survival_rate)
##Explanation:In the first line of code, we are loading the dplyr package, which provides a set of tools for efficiently manipulating datasets in R.In the second line of code, we are calculating the survival count of each passenger class. The aggregate function is used to apply a function (in this case, the sum function) to each group of values defined by the formula titanic$survived ~ titanic$pclass. This formula means that we are grouping the survived column by the pclass column.In the third line of code, we are calculating the total count of each passenger class. We are doing this in the same way as the survival count, but using the length function instead of the sum function.In the fourth line of code, we are calculating the survival rate of passengers in each class. We are doing this by dividing the survival count by the total count.In the last line of code, we are using the print function to display the survival rate.To draw a conclusion on which passenger class has the highest survival rate, you would look at the survival rate for each class and see which one is the highest. The class with the highest survival rate is the one where passengers were most likely to survive.
knitr::opts_chunk$set(echo = TRUE)
# Load necessary library
library(dplyr)
# Load the Titanic dataset
titanicData <- read.csv("https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.csv")
# Extract specified columns into a new data frame
titanicSubset <- select(titanicData, name, fare, sibsp, parch)
# Display the head of the new data frame
head(titanicSubset)
# Load necessary library
library(dplyr)
# Load the Titanic dataset
titanicData <- read.csv("https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.csv")
# Extract specified columns into a new data frame
titanicSubset <- select(titanicData, name, fare, sibsp, parch)
# Display the head of the new data frame
head(titanicSubset)
# Load necessary library
library(dplyr)
# Load the Titanic dataset
titanicData <- read.csv("https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.csv")
# Extract specified columns into a new data frame
titanicSubset <- select(titanicData, name, fare, sibsp, parch)
# Display the head of the new data frame
head(titanicSubset)
# Load necessary library
library(dplyr)
# Load the Titanic dataset
titanicData <- read.csv("https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.csv")
# Extract specified columns into a new data frame
titanicSubset <- select(titanicData, name, fare, sibsp, parch)
# Display the head of the new data frame
head(titanicSubset)
# Filter data for children who survived
childrenSurvivors <- filter(titanicData, age < 18, survived == 1)
# Count the number of children who survived
totalChildrenSurvivors <- count(childrenSurvivors)
# Print the result
print(totalChildrenSurvivors)
# Filter data for children who survived
childrenSurvivors <- filter(titanicData, age < 18, survived == 1)
# Count the number of children who survived
totalChildrenSurvivors <- count(childrenSurvivors)
# Print the result
print(totalChildrenSurvivors)
# Filter data for children who survived
childrenSurvivors <- filter(titanicData, age < 18, survived == 1)
# Count the number of children who survived
totalChildrenSurvivors <- count(childrenSurvivors)
# Print the result
print(totalChildrenSurvivors)
# Group data by sex and count the number of passengers
passengerCountBySex <- titanicData %>%
group_by(sex) %>%
count()
# Print the result
print(passengerCountBySex)
# Calculate the median age, excluding NA values
medianAge <- median(titanicData$age, na.rm = TRUE)
# Replace NA values in the age column with the median age
titanicData$age <- ifelse(is.na(titanicData$age), medianAge, titanicData$age)
# Display the head of the dataframe
head(titanicData)
# Aggregate survival count by class
survivalCount <- aggregate(survived ~ pclass, data = titanicData, sum)
# Count total passengers by class
totalCount <- aggregate(survived ~ pclass, data = titanicData, length)
# Calculate survival rate
survivalRate <- survivalCount$survived / totalCount$survived
# Combine the results into a data frame
results <- data.frame(PassengerClass = survivalCount$pclass, SurvivalCount = survivalCount$survived, TotalCount = totalCount$survived, SurvivalRate = survivalRate)
# Print the results
print(results)
# Create a boxplot of fare by sex
ggplot(titanicData, aes(x = sex, y = fare, fill = sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanicData, aes(x = sex, y = fare, fill = sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
##Explanation:In the first line of code, we are loading the ggplot2 package, which provides a set of tools for creating plots in R.In the second line of code, we are creating a boxplot with the ggplot function. The first argument to this function is the data frame that we want to plot (in this case, titanic). The second argument is an aes function, which defines the aesthetic mapping for the plot. In this case, we are mapping the sex column to the x-axis and the fare column to the y-axis.In the third line of code, we are adding a boxplot layer to the plot with the geom_boxplot function.In the last line of code, we are adding labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, you would look at the boxplot and see which box (male or female) has a higher median (the line in the middle of the box). The gender with the higher median fare is the one that tends to pay higher fares.
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanicData, aes(x = sex, y = fare, fill = sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
##Explanation:In the first line of code, we are loading the ggplot2 package, which provides a set of tools for creating plots in R.In the second line of code, we are creating a boxplot with the ggplot function. The first argument to this function is the data frame that we want to plot (in this case, titanic). The second argument is an aes function, which defines the aesthetic mapping for the plot. In this case, we are mapping the sex column to the x-axis and the fare column to the y-axis.In the third line of code, we are adding a boxplot layer to the plot with the geom_boxplot function.In the last line of code, we are adding labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, you would look at the boxplot and see which box (male or female) has a higher median (the line in the middle of the box). The gender with the higher median fare is the one that tends to pay higher fares.
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanicData, aes(x = sex, y = fare, fill = sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") + theme_minimal()
##Explanation:In the first line of code, we are loading the ggplot2 package, which provides a set of tools for creating plots in R.In the second line of code, we are creating a boxplot with the ggplot function. The first argument to this function is the data frame that we want to plot (in this case, titanic). The second argument is an aes function, which defines the aesthetic mapping for the plot. In this case, we are mapping the sex column to the x-axis and the fare column to the y-axis.In the third line of code, we are adding a boxplot layer to the plot with the geom_boxplot function.In the last line of code, we are adding labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, you would look at the boxplot and see which box (male or female) has a higher median (the line in the middle of the box). The gender with the higher median fare is the one that tends to pay higher fares.
library(ggplot2)
ggplot(Titanic, aes(x = sex, y = fare)) +
geom_boxplot() +
labs(title = "Distribution of Fare by Sex", x = "Sex", y = "Fare")
library(ggplot2)
ggplot(Titanic, aes(x = sex, y = fare)) +
geom_boxplot() +
labs(title = "Distribution of Fare by Sex", x = "Sex", y = "Fare")
# Convert the Titanic dataset to a data frame
titanic_df <- as.data.frame(Titanic)
# Load necessary libraries
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanic_df, aes(x = Sex, y = Freq, fill = Sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
##Explanation:In the first line of code, we are loading the ggplot2 package, which provides a set of tools for creating plots in R.In the second line of code, we are creating a boxplot with the ggplot function. The first argument to this function is the data frame that we want to plot (in this case, titanic). The second argument is an aes function, which defines the aesthetic mapping for the plot. In this case, we are mapping the sex column to the x-axis and the fare column to the y-axis.In the third line of code, we are adding a boxplot layer to the plot with the geom_boxplot function.In the last line of code, we are adding labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, you would look at the boxplot and see which box (male or female) has a higher median (the line in the middle of the box). The gender with the higher median fare is the one that tends to pay higher fares.
mean_fare <- aggregate(Titanic$fare ~ Titanic$sex, FUN = mean)
# Load the Titanic dataset
titanic_data <- read.csv("C:\\Users\\emine\\OneDrive\\Masaüstü\\ASSIGNMENT 2\\titanic.csv")
# Initialize a counter for printing the first 5 names
count <- 0
# Loop through the dataset
for (i in 1:nrow(titanic_data)) {
# Check conditions: female, age 50 or older, embarked from Southampton, and non-empty home destination
if (titanic_data$sex[i] == "female" && titanic_data$age[i] >= 50 && titanic_data$embarked[i] == "S" && !is.na(titanic_data$home.dest[i]) && titanic_data$home.dest[i] != "") {
# Print the name
print(titanic_data$name[i])
# Increment the counter
count <- count + 1
# Stop the loop after printing 5 names
if (count >= 5) {
break
}
}
}
library(ggplot2)
# Create the scatter plot
ggplot(Titanic, aes(x = age, y = fare)) +
geom_point() +
labs(x = "Age", y = "Fare", title = "Scatter plot of Fare vs Age")
# Calculate the mean fare for each sex
mean_fares <- aggregate(fare ~ sex, data = titanicData, FUN = mean)
# Print the mean fares
print(mean_fares)
##Explanation:In the first line of code, we are calculating the mean fare for each sex. The aggregate function is used to apply a function (in this case, the mean function) to each group of values defined by the formula titanic$fare ~ titanic$sex. This formula means that we are grouping the fare column by the sex column.In the second line of code, we are using the print function to display the mean fare.To describe if the calculation aligns with the boxplot, you would compare the mean fare for each sex with the median fare for each sex (the line in the middle of the box in the boxplot). If the mean fare is higher for the same sex that has a higher median fare in the boxplot, then the calculation aligns with the boxplot. This would suggest that the distribution of fare for each sex is roughly symmetrical. If the mean fare is higher for a different sex than the one that has a higher median fare in the boxplot, then the calculation does not align with the boxplot. This would suggest that the distribution of fare for each sex is skewed.
# Initialize a counter for tracking the number of printed entries
count <- 0
# Loop through each row of the dataset
for (i in 1:nrow(titanicData)) {
# Check the conditions: female, age 50 or older, embarked from Southampton, non-empty home destination
if (titanicData$sex[i] == "female" && titanicData$age[i] >= 50 && titanicData$embarked[i] == "S" && titanicData$home.dest[i] != "") {
# Print the name of the person
print(titanicData$name[i])
# Increment the counter
count <- count + 1
# Stop the loop after printing 5 entries
if (count == 5) {
break
}
}
}
# Load necessary library
library(ggplot2)
# Create a scatter plot of fare vs age
ggplot(titanicData, aes(x = age, y = fare)) +
geom_point(alpha = 0.5) +  # Use semi-transparent points
labs(title = "Scatter Plot of Fare vs Age",
x = "Age (years)",
y = "Fare (pounds)") +
theme_minimal()
# Parameters
n <- 100  # number of computers
p <- 0.03  # probability of a computer encountering an issue
# Probability that no computer encounters an issue
probability_no_issue <- (1 - p)^n
# Print the result
print(probability_no_issue)
# Parameters
n <- 100  # number of computers
p <- 0.03  # probability of a computer encountering an issue
k <- 4  # number of computers encountering an issue
# Probability that at least 5 computers encounter an issue
probability_at_least_5 <- 1 - pbinom(k, n, p)
# Print the result
print(probability_at_least_5)
# Probability of a computer encountering an issue
p_issue <- 0.03
# Print the result
print(p_issue)
# Average rate of emails per day
lambda <- 3
# Calculate probabilities for receiving 2, 3, ..., 9 emails
probabilities <- dpois(2:9, lambda)
# Print the probabilities
probabilities
# Define the lambda
lambda <- 3
# Calculate the probability for k = 0 to 3
prob_less_than_4 <- ppois(3, lambda)
# Calculate the probability for k >= 4
prob_4_or_more <- 1 - prob_less_than_4
# Print the probability
print(prob_4_or_more)
# Parameters for Binomial distribution
n <- 100
p <- 0.03
# Parameters for Poisson distribution
lambda <- n * p
# Number of samples
samples <- 50000
# Generate samples
binomial_samples <- rbinom(samples, n, p)
poisson_samples <- rpois(samples, lambda)
# Create histograms
hist(binomial_samples, breaks=seq(from=min(binomial_samples), to=max(binomial_samples), by=1), freq=FALSE, col="green", xlim=c(min(binomial_samples), max(binomial_samples)), main="Binomial vs Poisson", xlab="Value", ylab="Density")
hist(poisson_samples, breaks=seq(from=min(poisson_samples), to=max(poisson_samples), by=1), freq=FALSE, col=rgb(0,0,1,0.5), add=TRUE)
# Add legend
legend("topright", legend=c("Binomial", "Poisson"), fill=c("green", "blue"))
# Average rate of emails per day
lambda <- 3
# Number of samples
samples <- 50000
# Generate samples
sample_data <- rpois(samples, lambda)
# Parameters for Binomial distribution
n <- 100
p <- 0.03
# Parameters for Poisson distribution
lambda <- n * p
# Number of samples
samples <- 50000
# Generate samples
binomial_samples <- rbinom(samples, n, p)
poisson_samples <- rpois(samples, lambda)
# Create histograms
hist(binomial_samples, breaks=seq(from=min(binomial_samples), to=max(binomial_samples), by=1), freq=FALSE, col="green", xlim=c(min(binomial_samples), max(binomial_samples)), main="Binomial vs Poisson", xlab="Value", ylab="Density")
hist(poisson_samples, breaks=seq(from=min(poisson_samples), to=max(poisson_samples), by=1), freq=FALSE, col=rgb(0,0,1,0.5), add=TRUE)
# Add legend
legend("topright", legend=c("Binomial", "Poisson"), fill=c("green", "blue"))
# Number of trials (computers)
n <- 100
# Probability of success (encountering a software issue)
p <- 0.03
# Number of samples
samples <- 50000
# Generate samples
sample_data <- rbinom(samples, n, p)
# Average rate of emails per day
lambda <- 3
# Number of samples
samples <- 50000
# Generate samples
sample_data <- rpois(samples, lambda)
# Parameters for Binomial distribution
n <- 100
p <- 0.03
# Parameters for Poisson distribution
lambda <- n * p
# Number of samples
samples <- 50000
# Generate samples
binomial_samples <- rbinom(samples, n, p)
poisson_samples <- rpois(samples, lambda)
# Create histograms
hist(binomial_samples, breaks=seq(from=min(binomial_samples), to=max(binomial_samples), by=1), freq=FALSE, col="green", xlim=c(min(binomial_samples), max(binomial_samples)), main="Binomial vs Poisson", xlab="Value", ylab="Density")
hist(poisson_samples, breaks=seq(from=min(poisson_samples), to=max(poisson_samples), by=1), freq=FALSE, col=rgb(0,0,1,0.5), add=TRUE)
# Add legend
legend("topright", legend=c("Binomial", "Poisson"), fill=c("green", "blue"))
knitr::opts_chunk$set(echo = TRUE)
# Load necessary library
library(dplyr)
# Load the Titanic dataset
titanicData <- read.csv("https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.csv")
# Extract specified columns into a new data frame
titanicSubset <- select(titanicData, name, fare, sibsp, parch)
# Display the head of the new data frame
head(titanicSubset)
# Filter data for children who survived
childrenSurvivors <- filter(titanicData, age < 18, survived == 1)
# Count the number of children who survived
totalChildrenSurvivors <- count(childrenSurvivors)
# Print the result
print(totalChildrenSurvivors)
# Group data by sex and count the number of passengers
passengerCountBySex <- titanicData %>%
group_by(sex) %>%
count()
# Print the result
print(passengerCountBySex)
# Calculate the median age, excluding NA values
medianAge <- median(titanicData$age, na.rm = TRUE)
# Replace NA values in the age column with the median age
titanicData$age <- ifelse(is.na(titanicData$age), medianAge, titanicData$age)
# Display the head of the dataframe
head(titanicData)
# Calculate the survival count of each passenger class
survivalCount <- aggregate(survived ~ pclass, data = titanicData, sum)
# Calculate the total count of each passenger class
totalCount <- aggregate(survived ~ pclass, data = titanicData, length)
# Calculate the survival rate of passengers in each class
survivalRate <- survivalCount$survived / totalCount$survived
# Combine the results into a data frame
results <- data.frame(PassengerClass = survivalCount$pclass, SurvivalCount = survivalCount$survived, TotalCount = totalCount$survived, SurvivalRate = survivalRate)
# Print the results
print(results)
##Explanation: In the initial line of code, I imported the dplyr package. This package is a collection of tools for efficiently handling data sets in R. Next, I determined the count of survivors for each passenger class. I used the aggregate function to apply a function (in this case, sum) to each group of values defined by the formula titanic$survived ~ titanic$pclass. This formula signifies that we're grouping the 'survived' column by the 'pclass' column. Following that, I calculated the total count of passengers in each class. I similarly did this to the survival count, but I used the length function instead of the sum function. In the subsequent line of code, I determined the survival rate for each class of passengers.  Finally, I used the print function to display the survival rate.
##Conclusion: To understand which passenger class had the highest survival rate, you would compare the survival rates of each class and identify the highest one. The class with the highest survival rate is the one where passengers had the greatest likelihood of survival. By examining the SurvivalRate column, you can see which class had the highest survival rate. Historical data suggests that first-class passengers had a higher survival rate due to better access to lifeboats and other facilities.
# Convert the Titanic dataset to a data frame
titanic_df <- as.data.frame(Titanic)
# Load necessary libraries
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanic_df, aes(x = Sex, y = Freq, fill = Sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
##Explanation: In the first line of code, I loaded the ggplot2 package, which provides a set of tools for creating plots in R. In the second line of code, I created a boxplot with the ggplot function. I mapped the sex column to the x-axis and the fare column to the y-axis. In the third line of code, I added a boxplot layer to the plot with the geom_boxplot function.In the last line of code, I added labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, we can look at the boxplot and see which box (male or female) has a higher median. The gender with the higher median fare is the one that tends to pay higher fares.
##Conclusion: Historically, it has been observed that females on the Titanic tended to have higher fares, possibly due to higher class accommodations.
# Convert the Titanic dataset to a data frame
titanic_df <- as.data.frame(Titanic)
# Load necessary libraries
library(ggplot2)
# Create a boxplot of fare by sex
ggplot(titanic_df, aes(x = Sex, y = Freq, fill = Sex)) +
geom_boxplot() +
labs(title = "Boxplot of Fare by Sex", x = "Sex", y = "Fare") +
theme_minimal()
##Explanation: In the first line of code, I loaded the ggplot2 package, which provides a set of tools for creating plots in R. In the second line of code, I created a boxplot with the ggplot function. I mapped the sex column to the x-axis and the fare column to the y-axis. In the third line of code, I added a boxplot layer to the plot with the geom_boxplot function.In the last line of code, I added labels to the plot with the labs function. The title argument is used to set the title of the plot, and the x and y arguments are used to set the labels for the x-axis and y-axis, respectively.To infer which gender tends to pay higher fares, we can look at the boxplot and see which box (male or female) has a higher median. The gender with the higher median fare is the one that tends to pay higher fares.
##Conclusion: Historically, it has been observed that females on the Titanic tended to have higher fares, possibly due to higher class accommodations.
# Load the necessary library
library(readr)
# Calculate the mean fare for each sex
mean_fares <- aggregate(fare ~ sex, data = titanicData, FUN = mean)
# Print the mean fares
print(mean_fares)
# Create a boxplot of fares by sex
boxplot(fare ~ sex, data = titanicData, main = "Boxplot of Fares by Sex", xlab = "Sex", ylab = "Fare")
##Explanation: In the first line of code, I calculated the mean fare for each sex. The aggregate function is used to apply a function (in this case, the mean function) to each group of values defined by the formula titanic$fare ~ titanic$sex. This formula means that  grouped the fare column by the sex column.In the second line of code, I used the print function to display the mean fare.To describe if the calculation aligns with the boxplot, we can compare the mean fare for each sex with the median fare for each sex. If the mean fare is higher for the same sex that has a higher median fare in the boxplot, then the calculation aligns with the boxplot. This would suggest that the distribution of fare for each sex is approximately symmetrical. If the mean fare is higher for a different sex than the one that has a higher median fare in the boxplot, then the calculation does not align with the boxplot. This would suggest that the distribution of fare for each sex is skewed.
##Conclusion: The boxplot analysis of the Titanic dataset shows that female passengers generally paid higher fares than males. Both genders had outliers who paid significantly more than the majority, indicating a small group of passengers with much more expensive tickets. The data is right-skewed for both sexes, meaning higher fares greatly influenced the overall fare distribution. This information can shed light on the socio-economic conditions on the Titanic, as higher fares likely corresponded to higher social status or better accommodations.
# Initialize a counter for tracking the number of printed entries
count <- 0
# Loop through each row of the dataset
for (i in 1:nrow(titanicData)) {
# Check the conditions: female, age 50 or older, embarked from Southampton, non-empty home destination
if (titanicData$sex[i] == "female" && titanicData$age[i] >= 50 && titanicData$embarked[i] == "S" && titanicData$home.dest[i] != "") {
# Print the name of the person
print(titanicData$name[i])
# Increment the counter
count <- count + 1
# Stop the loop after printing 5 entries
if (count == 5) {
break
}
}
}
# Load necessary library
library(ggplot2)
# Create a scatter plot of fare vs age
ggplot(titanicData, aes(x = age, y = fare)) +
geom_point(alpha = 0.5) +  # Use semi-transparent points
labs(title = "Scatter Plot of Fare vs Age",
x = "Age (years)",
y = "Fare (pounds)") +
theme_minimal()
##Conclusion: The scatter plot of Fare vs Age for Titanic passengers indicates that fare prices varied greatly, but there's no clear correlation between a passenger's age and the fare they paid. Passengers of all ages can be seen across the fare spectrum, suggesting that other factors, like class of service or cabin location, likely had more influence on fare price. The presence of high-fare outliers across all ages also indicates a wide range in passengers' financial means or willingness to pay, regardless of age.
# Parameters
n <- 100  # number of computers
p <- 0.03  # probability of a computer encountering an issue
# Probability that no computer encounters an issue
probability_no_issue <- (1 - p)^n
# Print the result
print(probability_no_issue)
# Parameters
n <- 100  # number of computers
p <- 0.03  # probability of a computer encountering an issue
k <- 4  # number of computers encountering an issue
# Probability that at least 5 computers encounter an issue
probability_at_least_5 <- 1 - pbinom(k, n, p)
# Print the result
print(probability_at_least_5)
# Probability of a computer encountering an issue
p_issue <- 0.03
# Print the result
print(p_issue)
# Average rate of emails per day
lambda <- 3
# Calculate probabilities for receiving 2, 3, ..., 9 emails
probabilities <- dpois(2:9, lambda)
# Print the probabilities
probabilities
# Define the lambda
lambda <- 3
# Calculate the probability for k = 0 to 3
prob_less_than_4 <- ppois(3, lambda)
# Calculate the probability for k >= 4
prob_4_or_more <- 1 - prob_less_than_4
# Print the probability
print(prob_4_or_more)
##Answer:  Both the Binomial and Poisson distributions can be used to model the number of "successes" (in this case, receiving emails) in a given number of trials or a given interval of time. However, they have different assumptions and are used in different contexts.
##Explanation: The Binomial distribution is used for a fixed number of independent trials with the same success probability, like checking emails hourly and counting "successes" when at least one email is received. The Poisson distribution counts events happening in a fixed time or space with a known mean rate, like emails arriving randomly throughout the day. Both distributions are discrete, skewed right, and take non-negative integer values. However, the Poisson distribution becomes more symmetric with a higher mean, while the Binomial distribution becomes more symmetric when the success probability is around 0.5.
##In conclusion, while both distributions can be used to model count data, the choice between the Binomial and Poisson distributions depends on the specific characteristics of the situation being modeled.
# Number of trials (computers)
n <- 100
# Probability of success (encountering a software issue)
p <- 0.03
# Number of samples
samples <- 50000
# Generate samples
sample_data <- rbinom(samples, n, p)
# Average rate of emails per day
lambda <- 3
# Number of samples
samples <- 50000
# Generate samples
sample_data <- rpois(samples, lambda)
# Parameters for Binomial distribution
n <- 100
p <- 0.03
# Parameters for Poisson distribution
lambda <- n * p
# Number of samples
samples <- 50000
# Generate samples
binomial_samples <- rbinom(samples, n, p)
poisson_samples <- rpois(samples, lambda)
# Create histograms
hist(binomial_samples, breaks=seq(from=min(binomial_samples), to=max(binomial_samples), by=1), freq=FALSE, col="green", xlim=c(min(binomial_samples), max(binomial_samples)), main="Binomial vs Poisson", xlab="Value", ylab="Density")
hist(poisson_samples, breaks=seq(from=min(poisson_samples), to=max(poisson_samples), by=1), freq=FALSE, col=rgb(0,0,1,0.5), add=TRUE)
# Add legend
legend("topright", legend=c("Binomial", "Poisson"), fill=c("green", "blue"))
---
title: "ASSIGNMENT2"
